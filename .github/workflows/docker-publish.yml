name: Docker Build and Publish

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Grant the workflow token the permissions required to publish to GHCR
permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [jellyfin-rffmpeg-server, rffmpeg-worker]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # fetch full history so git diff/show work reliably in CI
          fetch-depth: 0

      - name: Get changed files (service only)
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          files: |
            ${{ matrix.service }}/**

      - name: Load versions file
        id: load-versions
        run: |
          if [ -f versions.env ]; then
            source versions.env || true
            echo "JELLYFIN_STABLE=${JELLYFIN_STABLE:-}" >> $GITHUB_ENV
            echo "JELLYFIN_DEV=${JELLYFIN_DEV:-}" >> $GITHUB_ENV
          else
            echo "JELLYFIN_STABLE=10.10.7" >> $GITHUB_ENV
            echo "JELLYFIN_DEV=10.11.0-rc8" >> $GITHUB_ENV
          fi

      - name: Initialize version change status
        id: init-version-status
        run: |
          echo "stable_changed=false" >> "$GITHUB_OUTPUT"
          echo "dev_changed=false" >> "$GITHUB_OUTPUT"

      - name: Compare versions.env across commits
        id: compare-versions
        if: github.event_name == 'push'
        run: |
          BEFORE=${{ github.event.before }}
          AFTER=${{ github.sha }}

          # If this is the first commit on the branch, and versions.env exists, mark both changed
          if [ "$BEFORE" = "0000000000000000000000000000000000000000" ]; then
            if [ -f versions.env ]; then
              echo "stable_changed=true" >> "$GITHUB_OUTPUT"
              echo "dev_changed=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          # If versions.env was changed in this push, compare previous values to current safely
          if git diff --name-only "$BEFORE" "$AFTER" | grep -q '^versions.env$'; then
            PREV_STABLE=$(git show "$BEFORE":versions.env 2>/dev/null | grep '^JELLYFIN_STABLE=' | cut -d= -f2- || true)
            PREV_DEV=$(git show "$BEFORE":versions.env 2>/dev/null | grep '^JELLYFIN_DEV=' | cut -d= -f2- || true)
            CURR_STABLE=$(grep '^JELLYFIN_STABLE=' versions.env | cut -d= -f2- || echo "")
            CURR_DEV=$(grep '^JELLYFIN_DEV=' versions.env | cut -d= -f2- || echo "")

            if [ "$PREV_STABLE" != "$CURR_STABLE" ]; then echo "stable_changed=true" >> "$GITHUB_OUTPUT"; fi
            if [ "$PREV_DEV" != "$CURR_DEV" ]; then echo "dev_changed=true" >> "$GITHUB_OUTPUT"; fi
            exit 0
          fi

          echo "stable_changed=false" >> "$GITHUB_OUTPUT"
          echo "dev_changed=false" >> "$GITHUB_OUTPUT"

      - name: Make build decision
        id: decision
        run: |
          any_changed=${{ steps.changed-files.outputs.any_changed }}
          stable_changed=${{ steps.compare-versions.outputs.stable_changed || steps.init-version-status.outputs.stable_changed }}
          dev_changed=${{ steps.compare-versions.outputs.dev_changed || steps.init-version-status.outputs.dev_changed }}

          build_stable=$([[ "$any_changed" == 'true' || "$stable_changed" == 'true' ]] && echo "true" || echo "false")
          build_dev=$([[ "$any_changed" == 'true' || "$dev_changed" == 'true' ]] && echo "true" || echo "false")
          build_any=$([[ "$build_stable" == 'true' || "$build_dev" == 'true' ]] && echo "true" || echo "false")

          echo "build_stable=${build_stable}" >> "$GITHUB_OUTPUT"
          echo "build_dev=${build_dev}" >> "$GITHUB_OUTPUT"
          echo "build_any=${build_any}" >> "$GITHUB_OUTPUT"




      - name: Set image tags
        id: meta
        if: steps.decision.outputs.build_any == 'true'
        run: |
          IMAGE_BASE_SERVER="ghcr.io/gitdeath/jellyfin-rffmpeg-swarm-server"
          IMAGE_BASE_WORKER="ghcr.io/gitdeath/jellyfin-rffmpeg-swarm-worker"

          if [ "${{ matrix.service }}" = "jellyfin-rffmpeg-server" ]; then
            echo "tags_stable=${IMAGE_BASE_SERVER}:latest" >> "$GITHUB_OUTPUT"
            echo "tags_dev=${IMAGE_BASE_SERVER}:dev" >> "$GITHUB_OUTPUT"
          else
            echo "tags_stable=${IMAGE_BASE_WORKER}:latest" >> "$GITHUB_OUTPUT"
            echo "tags_dev=${IMAGE_BASE_WORKER}:dev" >> "$GITHUB_OUTPUT"
          fi

      - name: Set IMAGE_BASE env
        if: steps.decision.outputs.build_any == 'true'
        run: |
          if [ "${{ matrix.service }}" = "jellyfin-rffmpeg-server" ]; then
            echo "IMAGE_BASE=ghcr.io/gitdeath/jellyfin-rffmpeg-swarm-server" >> $GITHUB_ENV
          else
            echo "IMAGE_BASE=ghcr.io/gitdeath/jellyfin-rffmpeg-swarm-worker" >> $GITHUB_ENV
          fi

      - name: Set up QEMU
        if: steps.decision.outputs.build_any == 'true'
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.decision.outputs.build_any == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' && steps.decision.outputs.build_any == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push STABLE (latest) image
        if: steps.decision.outputs.build_stable == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags_stable }}
          build-args: |
            JELLYFIN_VERSION=${{ env.JELLYFIN_STABLE }}

      - name: Build and push DEV (dev) image
        if: steps.decision.outputs.build_dev == 'true'
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags_dev }}
          build-args: |
            JELLYFIN_VERSION=${{ env.JELLYFIN_DEV }}

      - name: Print status
        if: steps.decision.outputs.build_any != 'true'
        run: echo "No changes detected for ${{ matrix.service }}. Skipping build."